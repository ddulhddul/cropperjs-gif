(function(e, a) { for(var i in a) e[i] = a[i]; }(window, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./bower_components/gif.js/dist/gif.js":
/*!*********************************************!*\
  !*** ./bower_components/gif.js/dist/gif.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var require;var require;// gif.js 0.2.0 - https://github.com/jnordberg/gif.js\n(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){function EventEmitter(){this._events=this._events||{};this._maxListeners=this._maxListeners||undefined}module.exports=EventEmitter;EventEmitter.EventEmitter=EventEmitter;EventEmitter.prototype._events=undefined;EventEmitter.prototype._maxListeners=undefined;EventEmitter.defaultMaxListeners=10;EventEmitter.prototype.setMaxListeners=function(n){if(!isNumber(n)||n<0||isNaN(n))throw TypeError(\"n must be a positive number\");this._maxListeners=n;return this};EventEmitter.prototype.emit=function(type){var er,handler,len,args,i,listeners;if(!this._events)this._events={};if(type===\"error\"){if(!this._events.error||isObject(this._events.error)&&!this._events.error.length){er=arguments[1];if(er instanceof Error){throw er}else{var err=new Error('Uncaught, unspecified \"error\" event. ('+er+\")\");err.context=er;throw err}}}handler=this._events[type];if(isUndefined(handler))return false;if(isFunction(handler)){switch(arguments.length){case 1:handler.call(this);break;case 2:handler.call(this,arguments[1]);break;case 3:handler.call(this,arguments[1],arguments[2]);break;default:args=Array.prototype.slice.call(arguments,1);handler.apply(this,args)}}else if(isObject(handler)){args=Array.prototype.slice.call(arguments,1);listeners=handler.slice();len=listeners.length;for(i=0;i<len;i++)listeners[i].apply(this,args)}return true};EventEmitter.prototype.addListener=function(type,listener){var m;if(!isFunction(listener))throw TypeError(\"listener must be a function\");if(!this._events)this._events={};if(this._events.newListener)this.emit(\"newListener\",type,isFunction(listener.listener)?listener.listener:listener);if(!this._events[type])this._events[type]=listener;else if(isObject(this._events[type]))this._events[type].push(listener);else this._events[type]=[this._events[type],listener];if(isObject(this._events[type])&&!this._events[type].warned){if(!isUndefined(this._maxListeners)){m=this._maxListeners}else{m=EventEmitter.defaultMaxListeners}if(m&&m>0&&this._events[type].length>m){this._events[type].warned=true;console.error(\"(node) warning: possible EventEmitter memory \"+\"leak detected. %d listeners added. \"+\"Use emitter.setMaxListeners() to increase limit.\",this._events[type].length);if(typeof console.trace===\"function\"){console.trace()}}}return this};EventEmitter.prototype.on=EventEmitter.prototype.addListener;EventEmitter.prototype.once=function(type,listener){if(!isFunction(listener))throw TypeError(\"listener must be a function\");var fired=false;function g(){this.removeListener(type,g);if(!fired){fired=true;listener.apply(this,arguments)}}g.listener=listener;this.on(type,g);return this};EventEmitter.prototype.removeListener=function(type,listener){var list,position,length,i;if(!isFunction(listener))throw TypeError(\"listener must be a function\");if(!this._events||!this._events[type])return this;list=this._events[type];length=list.length;position=-1;if(list===listener||isFunction(list.listener)&&list.listener===listener){delete this._events[type];if(this._events.removeListener)this.emit(\"removeListener\",type,listener)}else if(isObject(list)){for(i=length;i-- >0;){if(list[i]===listener||list[i].listener&&list[i].listener===listener){position=i;break}}if(position<0)return this;if(list.length===1){list.length=0;delete this._events[type]}else{list.splice(position,1)}if(this._events.removeListener)this.emit(\"removeListener\",type,listener)}return this};EventEmitter.prototype.removeAllListeners=function(type){var key,listeners;if(!this._events)return this;if(!this._events.removeListener){if(arguments.length===0)this._events={};else if(this._events[type])delete this._events[type];return this}if(arguments.length===0){for(key in this._events){if(key===\"removeListener\")continue;this.removeAllListeners(key)}this.removeAllListeners(\"removeListener\");this._events={};return this}listeners=this._events[type];if(isFunction(listeners)){this.removeListener(type,listeners)}else if(listeners){while(listeners.length)this.removeListener(type,listeners[listeners.length-1])}delete this._events[type];return this};EventEmitter.prototype.listeners=function(type){var ret;if(!this._events||!this._events[type])ret=[];else if(isFunction(this._events[type]))ret=[this._events[type]];else ret=this._events[type].slice();return ret};EventEmitter.prototype.listenerCount=function(type){if(this._events){var evlistener=this._events[type];if(isFunction(evlistener))return 1;else if(evlistener)return evlistener.length}return 0};EventEmitter.listenerCount=function(emitter,type){return emitter.listenerCount(type)};function isFunction(arg){return typeof arg===\"function\"}function isNumber(arg){return typeof arg===\"number\"}function isObject(arg){return typeof arg===\"object\"&&arg!==null}function isUndefined(arg){return arg===void 0}},{}],2:[function(require,module,exports){var UA,browser,mode,platform,ua;ua=navigator.userAgent.toLowerCase();platform=navigator.platform.toLowerCase();UA=ua.match(/(opera|ie|firefox|chrome|version)[\\s\\/:]([\\w\\d\\.]+)?.*?(safari|version[\\s\\/:]([\\w\\d\\.]+)|$)/)||[null,\"unknown\",0];mode=UA[1]===\"ie\"&&document.documentMode;browser={name:UA[1]===\"version\"?UA[3]:UA[1],version:mode||parseFloat(UA[1]===\"opera\"&&UA[4]?UA[4]:UA[2]),platform:{name:ua.match(/ip(?:ad|od|hone)/)?\"ios\":(ua.match(/(?:webos|android)/)||platform.match(/mac|win|linux/)||[\"other\"])[0]}};browser[browser.name]=true;browser[browser.name+parseInt(browser.version,10)]=true;browser.platform[browser.platform.name]=true;module.exports=browser},{}],3:[function(require,module,exports){var EventEmitter,GIF,browser,extend=function(child,parent){for(var key in parent){if(hasProp.call(parent,key))child[key]=parent[key]}function ctor(){this.constructor=child}ctor.prototype=parent.prototype;child.prototype=new ctor;child.__super__=parent.prototype;return child},hasProp={}.hasOwnProperty,indexOf=[].indexOf||function(item){for(var i=0,l=this.length;i<l;i++){if(i in this&&this[i]===item)return i}return-1},slice=[].slice;EventEmitter=require(\"events\").EventEmitter;browser=require(\"./browser.coffee\");GIF=function(superClass){var defaults,frameDefaults;extend(GIF,superClass);defaults={workerScript:\"gif.worker.js\",workers:2,repeat:0,background:\"#fff\",quality:10,width:null,height:null,transparent:null,debug:false,dither:false};frameDefaults={delay:500,copy:false};function GIF(options){var base,key,value;this.running=false;this.options={};this.frames=[];this.freeWorkers=[];this.activeWorkers=[];this.setOptions(options);for(key in defaults){value=defaults[key];if((base=this.options)[key]==null){base[key]=value}}}GIF.prototype.setOption=function(key,value){this.options[key]=value;if(this._canvas!=null&&(key===\"width\"||key===\"height\")){return this._canvas[key]=value}};GIF.prototype.setOptions=function(options){var key,results,value;results=[];for(key in options){if(!hasProp.call(options,key))continue;value=options[key];results.push(this.setOption(key,value))}return results};GIF.prototype.addFrame=function(image,options){var frame,key;if(options==null){options={}}frame={};frame.transparent=this.options.transparent;for(key in frameDefaults){frame[key]=options[key]||frameDefaults[key]}if(this.options.width==null){this.setOption(\"width\",image.width)}if(this.options.height==null){this.setOption(\"height\",image.height)}if(typeof ImageData!==\"undefined\"&&ImageData!==null&&image instanceof ImageData){frame.data=image.data}else if(typeof CanvasRenderingContext2D!==\"undefined\"&&CanvasRenderingContext2D!==null&&image instanceof CanvasRenderingContext2D||typeof WebGLRenderingContext!==\"undefined\"&&WebGLRenderingContext!==null&&image instanceof WebGLRenderingContext){if(options.copy){frame.data=this.getContextData(image)}else{frame.context=image}}else if(image.childNodes!=null){if(options.copy){frame.data=this.getImageData(image)}else{frame.image=image}}else{throw new Error(\"Invalid image\")}return this.frames.push(frame)};GIF.prototype.render=function(){var i,j,numWorkers,ref;if(this.running){throw new Error(\"Already running\")}if(this.options.width==null||this.options.height==null){throw new Error(\"Width and height must be set prior to rendering\")}this.running=true;this.nextFrame=0;this.finishedFrames=0;this.imageParts=function(){var j,ref,results;results=[];for(i=j=0,ref=this.frames.length;0<=ref?j<ref:j>ref;i=0<=ref?++j:--j){results.push(null)}return results}.call(this);numWorkers=this.spawnWorkers();if(this.options.globalPalette===true){this.renderNextFrame()}else{for(i=j=0,ref=numWorkers;0<=ref?j<ref:j>ref;i=0<=ref?++j:--j){this.renderNextFrame()}}this.emit(\"start\");return this.emit(\"progress\",0)};GIF.prototype.abort=function(){var worker;while(true){worker=this.activeWorkers.shift();if(worker==null){break}this.log(\"killing active worker\");worker.terminate()}this.running=false;return this.emit(\"abort\")};GIF.prototype.spawnWorkers=function(){var j,numWorkers,ref,results;numWorkers=Math.min(this.options.workers,this.frames.length);(function(){results=[];for(var j=ref=this.freeWorkers.length;ref<=numWorkers?j<numWorkers:j>numWorkers;ref<=numWorkers?j++:j--){results.push(j)}return results}).apply(this).forEach(function(_this){return function(i){var worker;_this.log(\"spawning worker \"+i);worker=new Worker(_this.options.workerScript);worker.onmessage=function(event){_this.activeWorkers.splice(_this.activeWorkers.indexOf(worker),1);_this.freeWorkers.push(worker);return _this.frameFinished(event.data)};return _this.freeWorkers.push(worker)}}(this));return numWorkers};GIF.prototype.frameFinished=function(frame){var i,j,ref;this.log(\"frame \"+frame.index+\" finished - \"+this.activeWorkers.length+\" active\");this.finishedFrames++;this.emit(\"progress\",this.finishedFrames/this.frames.length);this.imageParts[frame.index]=frame;if(this.options.globalPalette===true){this.options.globalPalette=frame.globalPalette;this.log(\"global palette analyzed\");if(this.frames.length>2){for(i=j=1,ref=this.freeWorkers.length;1<=ref?j<ref:j>ref;i=1<=ref?++j:--j){this.renderNextFrame()}}}if(indexOf.call(this.imageParts,null)>=0){return this.renderNextFrame()}else{return this.finishRendering()}};GIF.prototype.finishRendering=function(){var data,frame,i,image,j,k,l,len,len1,len2,len3,offset,page,ref,ref1,ref2;len=0;ref=this.imageParts;for(j=0,len1=ref.length;j<len1;j++){frame=ref[j];len+=(frame.data.length-1)*frame.pageSize+frame.cursor}len+=frame.pageSize-frame.cursor;this.log(\"rendering finished - filesize \"+Math.round(len/1e3)+\"kb\");data=new Uint8Array(len);offset=0;ref1=this.imageParts;for(k=0,len2=ref1.length;k<len2;k++){frame=ref1[k];ref2=frame.data;for(i=l=0,len3=ref2.length;l<len3;i=++l){page=ref2[i];data.set(page,offset);if(i===frame.data.length-1){offset+=frame.cursor}else{offset+=frame.pageSize}}}image=new Blob([data],{type:\"image/gif\"});return this.emit(\"finished\",image,data)};GIF.prototype.renderNextFrame=function(){var frame,task,worker;if(this.freeWorkers.length===0){throw new Error(\"No free workers\")}if(this.nextFrame>=this.frames.length){return}frame=this.frames[this.nextFrame++];worker=this.freeWorkers.shift();task=this.getTask(frame);this.log(\"starting frame \"+(task.index+1)+\" of \"+this.frames.length);this.activeWorkers.push(worker);return worker.postMessage(task)};GIF.prototype.getContextData=function(ctx){return ctx.getImageData(0,0,this.options.width,this.options.height).data};GIF.prototype.getImageData=function(image){var ctx;if(this._canvas==null){this._canvas=document.createElement(\"canvas\");this._canvas.width=this.options.width;this._canvas.height=this.options.height}ctx=this._canvas.getContext(\"2d\");ctx.setFill=this.options.background;ctx.fillRect(0,0,this.options.width,this.options.height);ctx.drawImage(image,0,0);return this.getContextData(ctx)};GIF.prototype.getTask=function(frame){var index,task;index=this.frames.indexOf(frame);task={index:index,last:index===this.frames.length-1,delay:frame.delay,transparent:frame.transparent,width:this.options.width,height:this.options.height,quality:this.options.quality,dither:this.options.dither,globalPalette:this.options.globalPalette,repeat:this.options.repeat,canTransfer:browser.name===\"chrome\"};if(frame.data!=null){task.data=frame.data}else if(frame.context!=null){task.data=this.getContextData(frame.context)}else if(frame.image!=null){task.data=this.getImageData(frame.image)}else{throw new Error(\"Invalid frame\")}return task};GIF.prototype.log=function(){var args;args=1<=arguments.length?slice.call(arguments,0):[];if(!this.options.debug){return}return console.log.apply(console,args)};return GIF}(EventEmitter);module.exports=GIF},{\"./browser.coffee\":2,events:1}]},{},[3])(3)});\n//# sourceMappingURL=gif.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./bower_components/gif.js/dist/gif.js\n");

/***/ }),

/***/ "./node_modules/exports-loader/index.js?GIFuctJS=GIF!./bower_components/gifuct-js/dist/gifuct-js.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/exports-loader?GIFuctJS=GIF!./bower_components/gifuct-js/dist/gifuct-js.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var require;var require;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\n// Stream object for reading off bytes from a byte array\n\nfunction ByteStream(data){\n\tthis.data = data;\n\tthis.pos = 0;\n}\n\n// read the next byte off the stream\nByteStream.prototype.readByte = function(){\n\treturn this.data[this.pos++];\n};\n\n// look at the next byte in the stream without updating the stream position\nByteStream.prototype.peekByte = function(){\n\treturn this.data[this.pos];\n};\n\n// read an array of bytes\nByteStream.prototype.readBytes = function(n){\n\tvar bytes = new Array(n);\n\tfor(var i=0; i<n; i++){\n\t\tbytes[i] = this.readByte();\n\t}\n\treturn bytes;\n};\n\n// peek at an array of bytes without updating the stream position\nByteStream.prototype.peekBytes = function(n){\n\tvar bytes = new Array(n);\n\tfor(var i=0; i<n; i++){\n\t\tbytes[i] = this.data[this.pos + i];\n\t}\n\treturn bytes;\n};\n\n// read a string from a byte set\nByteStream.prototype.readString = function(len){\n\tvar str = '';\n\tfor(var i=0; i<len; i++){\n\t\tstr += String.fromCharCode(this.readByte());\n\t}\n\treturn str;\n};\n\n// read a single byte and return an array of bit booleans\nByteStream.prototype.readBitArray = function(){\n\tvar arr = [];\n\tvar bite = this.readByte();\n\tfor (var i = 7; i >= 0; i--) {\n\t\tarr.push(!!(bite & (1 << i)));\n\t}\n\treturn arr;\n};\n\n// read an unsigned int with endian option\nByteStream.prototype.readUnsigned = function(littleEndian){\n\tvar a = this.readBytes(2);\n\tif(littleEndian){\n\t\treturn (a[1] << 8) + a[0];\t\n\t}else{\n\t\treturn (a[0] << 8) + a[1];\n\t}\t\n};\n\nmodule.exports = ByteStream;\n},{}],2:[function(require,module,exports){\n\n// Primary data parsing object used to parse byte arrays\n\nvar ByteStream = require('./bytestream');\n\nfunction DataParser(data){\n\tthis.stream = new ByteStream(data);\n\t// the final parsed object from the data\n\tthis.output = {};\n}\n\nDataParser.prototype.parse = function(schema){\n\t// the top level schema is just the top level parts array\n\tthis.parseParts(this.output, schema);\t\n\treturn this.output;\n};\n\n// parse a set of hierarchy parts providing the parent object, and the subschema\nDataParser.prototype.parseParts = function(obj, schema){\n\tfor(var i=0; i<schema.length; i++){\n\t\tvar part = schema[i];\n\t\tthis.parsePart(obj, part); \n\t}\n};\n\nDataParser.prototype.parsePart = function(obj, part){\n\tvar name = part.label;\n\tvar value;\n\n\t// make sure the part meets any parse requirements\n\tif(part.requires && ! part.requires(this.stream, this.output, obj)){\n\t\treturn;\n\t}\n\t\n\tif(part.loop){\n\t\t// create a parse loop over the parts\n\t\tvar items = [];\n\t\twhile(part.loop(this.stream)){\n\t\t\tvar item = {};\n\t\t\tthis.parseParts(item, part.parts);\n\t\t\titems.push(item);\n\t\t}\n\t\tobj[name] = items;\n\t}else if(part.parts){\n\t\t// process any child parts\n\t\tvalue = {};\n\t\tthis.parseParts(value, part.parts);\n\t\tobj[name] = value;\n\t}else if(part.parser){\n\t\t// parse the value using a parser\n\t\tvalue = part.parser(this.stream, this.output, obj);\n\t\tif(!part.skip){\n\t\t\tobj[name] = value;\n\t\t}\n\t}else if(part.bits){\n\t\t// convert the next byte to a set of bit fields\n\t\tobj[name] = this.parseBits(part.bits);\n\t}\n};\n\n// combine bits to calculate value\nfunction bitsToNum(bitArray){\n\treturn bitArray.reduce(function(s, n) { return s * 2 + n; }, 0);\n}\n\n// parse a byte as a bit set (flags and values)\nDataParser.prototype.parseBits = function(details){\n\tvar out = {};\n\tvar bits = this.stream.readBitArray();\n\tfor(var key in details){\n\t\tvar item = details[key];\n\t\tif(item.length){\n\t\t\t// convert the bit set to value\n\t\t\tout[key] = bitsToNum(bits.slice(item.index, item.index + item.length));\n\t\t}else{\n\t\t\tout[key] = bits[item.index];\n\t\t}\n\t}\n\treturn out;\n};\n\nmodule.exports = DataParser;\n},{\"./bytestream\":1}],3:[function(require,module,exports){\n\n// a set of common parsers used with DataParser\n\nvar Parsers = {\n\t// read a byte\n\treadByte: function(){\n\t\treturn function(stream){\n\t\t\treturn stream.readByte();\n\t\t};\n\t},\n\t// read an array of bytes\n\treadBytes: function(length){\n\t\treturn function(stream){\n\t\t\treturn stream.readBytes(length);\n\t\t};\n\t},\n\t// read a string from bytes\n\treadString: function(length){\n\t\treturn function(stream){\n\t\t\treturn stream.readString(length);\n\t\t};\n\t},\n\t// read an unsigned int (with endian)\n\treadUnsigned: function(littleEndian){\n\t\treturn function(stream){\n\t\t\treturn stream.readUnsigned(littleEndian);\n\t\t};\n\t},\n\t// read an array of byte sets\n\treadArray: function(size, countFunc){\n\t\treturn function(stream, obj, parent){\n\t\t\tvar count = countFunc(stream, obj, parent);\n\t\t\tvar arr = new Array(count);\n\t\t\tfor(var i=0; i<count; i++){\n\t\t\t\tarr[i] = stream.readBytes(size);\n\t\t\t}\n\t\t\treturn arr;\n\t\t};\n\t}\n};\n\nmodule.exports = Parsers;\n},{}],4:[function(require,module,exports){\n// export wrapper for exposing library\n\nvar GIF = window.GIF || {};\n\nGIF = require('./gif');\n\nwindow.GIF = GIF;\n},{\"./gif\":5}],5:[function(require,module,exports){\n\n// object used to represent array buffer data for a gif file\n\nvar DataParser = require('../bower_components/js-binary-schema-parser/src/dataparser');\nvar gifSchema = require('./schema');\n\nfunction GIF(arrayBuffer){\n\t// convert to byte array\n\tvar byteData = new Uint8Array(arrayBuffer);\n\tvar parser = new DataParser(byteData);\n\t// parse the data\n\tthis.raw = parser.parse(gifSchema);\n\n\t// set a flag to make sure the gif contains at least one image\n\tthis.raw.hasImages = false;\n\tfor(var f=0; f<this.raw.frames.length; f++){\n\t\tif(this.raw.frames[f].image){\n\t\t\tthis.raw.hasImages = true;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\n// process a single gif image frames data, decompressing it using LZW \n// if buildPatch is true, the returned image will be a clamped 8 bit image patch\n// for use directly with a canvas.\nGIF.prototype.decompressFrame = function(index, buildPatch){\n\n\t// make sure a valid frame is requested\n\tif(index >= this.raw.frames.length){ return null; }\n\n\tvar frame = this.raw.frames[index];\n\tif(frame.image){\n\t\t// get the number of pixels\n\t\tvar totalPixels = frame.image.descriptor.width * frame.image.descriptor.height;\n\n\t\t// do lzw decompression\n\t\tvar pixels = lzw(frame.image.data.minCodeSize, frame.image.data.blocks, totalPixels);\n\n\t\t// deal with interlacing if necessary\n\t\tif(frame.image.descriptor.lct.interlaced){\n\t\t\tpixels = deinterlace(pixels, frame.image.descriptor.width);\n\t\t}\n\n\t\t// setup usable image object\n\t\tvar image = {\n\t\t\tpixels: pixels,\n\t\t\tdims: {\n\t\t\t\ttop: frame.image.descriptor.top,\n\t\t\t\tleft: frame.image.descriptor.left,\n\t\t\t\twidth: frame.image.descriptor.width,\n\t\t\t\theight: frame.image.descriptor.height\n\t\t\t}\n\t\t};\n\n\t\t// color table\n\t\tif(frame.image.descriptor.lct && frame.image.descriptor.lct.exists){\n\t\t\timage.colorTable = frame.image.lct;\n\t\t}else{\n\t\t\timage.colorTable = this.raw.gct;\n\t\t}\n\n\t\t// add per frame relevant gce information\n\t\tif(frame.gce){\n\t\t\timage.delay = (frame.gce.delay || 10) * 10; // convert to ms\n\t\t\timage.disposalType = frame.gce.extras.disposal;\n\t\t\t// transparency\n\t\t\tif(frame.gce.extras.transparentColorGiven){\n\t\t\t\timage.transparentIndex = frame.gce.transparentColorIndex;\n\t\t\t}\n\t\t}\n\n\t\t// create canvas usable imagedata if desired\n\t\tif(buildPatch){\n\t\t\timage.patch = generatePatch(image);\n\t\t}\n\n\t\treturn image;\t\t\n\t}\n\n\t// frame does not contains image\n\treturn null;\n\n\n\t/**\n\t * javascript port of java LZW decompression\n\t * Original java author url: https://gist.github.com/devunwired/4479231\n\t */\t\n\tfunction lzw(minCodeSize, data, pixelCount) {\n \t\t\n \t\tvar MAX_STACK_SIZE = 4096;\n\t\tvar nullCode = -1;\n\n\t\tvar npix = pixelCount;\n\t\tvar available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, i, datum, data_size, first, top, bi, pi;\n \n \t\tvar dstPixels = new Array(pixelCount);\n\t\tvar prefix = new Array(MAX_STACK_SIZE);\n\t\tvar suffix = new Array(MAX_STACK_SIZE);\n\t\tvar pixelStack = new Array(MAX_STACK_SIZE + 1);\n \n\t\t// Initialize GIF data stream decoder.\n\t\tdata_size = minCodeSize;\n\t\tclear = 1 << data_size;\n\t\tend_of_information = clear + 1;\n\t\tavailable = clear + 2;\n\t\told_code = nullCode;\n\t\tcode_size = data_size + 1;\n\t\tcode_mask = (1 << code_size) - 1;\n\t\tfor (code = 0; code < clear; code++) {\n\t\t\tprefix[code] = 0;\n\t\t\tsuffix[code] = code;\n\t\t}\n \n\t\t// Decode GIF pixel stream.\n\t\tdatum = bits = count = first = top = pi = bi = 0;\n\t\tfor (i = 0; i < npix; ) {\n\t\t\tif (top === 0) {\n\t\t\t\tif (bits < code_size) {\n\t\t\t\t\t\n\t\t\t\t\t// get the next byte\t\t\t\n\t\t\t\t\tdatum += data[bi] << bits;\n\n\t\t\t\t\tbits += 8;\n\t\t\t\t\tbi++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// Get the next code.\n\t\t\t\tcode = datum & code_mask;\n\t\t\t\tdatum >>= code_size;\n\t\t\t\tbits -= code_size;\n\t\t\t\t// Interpret the code\n\t\t\t\tif ((code > available) || (code == end_of_information)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (code == clear) {\n\t\t\t\t\t// Reset decoder.\n\t\t\t\t\tcode_size = data_size + 1;\n\t\t\t\t\tcode_mask = (1 << code_size) - 1;\n\t\t\t\t\tavailable = clear + 2;\n\t\t\t\t\told_code = nullCode;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (old_code == nullCode) {\n\t\t\t\t\tpixelStack[top++] = suffix[code];\n\t\t\t\t\told_code = code;\n\t\t\t\t\tfirst = code;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tin_code = code;\n\t\t\t\tif (code == available) {\n\t\t\t\t\tpixelStack[top++] = first;\n\t\t\t\t\tcode = old_code;\n\t\t\t\t}\n\t\t\t\twhile (code > clear) {\n\t\t\t\t\tpixelStack[top++] = suffix[code];\n\t\t\t\t\tcode = prefix[code];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfirst = suffix[code] & 0xff;\n\t\t\t\tpixelStack[top++] = first;\n\n\t\t\t\t// add a new string to the table, but only if space is available\n\t\t\t\t// if not, just continue with current table until a clear code is found\n\t\t\t\t// (deferred clear code implementation as per GIF spec)\n\t\t\t\tif(available < MAX_STACK_SIZE){\n\t\t\t\t\tprefix[available] = old_code;\n\t\t\t\t\tsuffix[available] = first;\n\t\t\t\t\tavailable++;\n\t\t\t\t\tif (((available & code_mask) === 0) && (available < MAX_STACK_SIZE)) {\n\t\t\t\t\t\tcode_size++;\n\t\t\t\t\t\tcode_mask += available;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\told_code = in_code;\n\t\t\t}\n\t\t\t// Pop a pixel off the pixel stack.\n\t\t\ttop--;\n\t\t\tdstPixels[pi++] = pixelStack[top];\n\t\t\ti++;\n\t\t}\n\n\t\tfor (i = pi; i < npix; i++) {\n\t\t\tdstPixels[i] = 0; // clear missing pixels\n\t\t}\n\n\t\treturn dstPixels;\n\t}\n\n\t// deinterlace function from https://github.com/shachaf/jsgif\n\tfunction deinterlace(pixels, width) {\n\t\t\n\t\tvar newPixels = new Array(pixels.length);\n\t\tvar rows = pixels.length / width;\n\t\tvar cpRow = function(toRow, fromRow) {\n\t\t\tvar fromPixels = pixels.slice(fromRow * width, (fromRow + 1) * width);\n\t\t\tnewPixels.splice.apply(newPixels, [toRow * width, width].concat(fromPixels));\n\t\t};\n\n\t\t// See appendix E.\n\t\tvar offsets = [0,4,2,1];\n\t\tvar steps   = [8,8,4,2];\n\n\t\tvar fromRow = 0;\n\t\tfor (var pass = 0; pass < 4; pass++) {\n\t\t\tfor (var toRow = offsets[pass]; toRow < rows; toRow += steps[pass]) {\n\t\t\t\tcpRow(toRow, fromRow);\n\t\t\t\tfromRow++;\n\t\t\t}\n\t\t}\n\n\t\treturn newPixels;\n\t}\n\n\t// create a clamped byte array patch for the frame image to be used directly with a canvas\n\t// TODO: could potentially squeeze some performance by doing a direct 32bit write per iteration\n\tfunction generatePatch(image){\n\n\t\tvar totalPixels = image.pixels.length;\n\t\tvar patchData = new Uint8ClampedArray(totalPixels * 4);\n\t\tfor(var i=0; i<totalPixels; i++){\n\t\t\tvar pos = i * 4;\n\t\t\tvar colorIndex = image.pixels[i];\n\t\t\tvar color = image.colorTable[colorIndex];\n\t\t\tpatchData[pos] = color[0];\n\t\t\tpatchData[pos + 1] = color[1];\n\t\t\tpatchData[pos + 2] = color[2];\n\t\t\tpatchData[pos + 3] = colorIndex !== image.transparentIndex ? 255 : 0;\n\t\t}\n\n\t\treturn patchData;\n\t}\n};\n\n// returns all frames decompressed\nGIF.prototype.decompressFrames = function(buildPatch){\n\tvar frames = [];\n\tfor(var i=0; i<this.raw.frames.length; i++){\n\t\tvar frame = this.raw.frames[i];\n\t\tif(frame.image){\n\t\t\tframes.push(this.decompressFrame(i, buildPatch));\n\t\t}\n\t}\n\treturn frames;\n};\n\nmodule.exports = GIF;\n},{\"../bower_components/js-binary-schema-parser/src/dataparser\":2,\"./schema\":6}],6:[function(require,module,exports){\n\n// Schema for the js file parser to use to parse gif files\n// For js object convenience (re-use), the schema objects are approximately reverse ordered\n\n// common parsers available\nvar Parsers = require('../bower_components/js-binary-schema-parser/src/parsers');\n\n// a set of 0x00 terminated subblocks\nvar subBlocks = {\n\tlabel: 'blocks',\n\tparser: function(stream){\n\t\tvar out = [];\n\t\tvar terminator = 0x00;\t\t\n\t\tfor(var size=stream.readByte(); size!==terminator; size=stream.readByte()){\n\t\t\tout = out.concat(stream.readBytes(size));\n\t\t}\n\t\treturn out;\n\t}\n};\n\n// global control extension\nvar gce = {\n\tlabel: 'gce',\n\trequires: function(stream){\n\t\t// just peek at the top two bytes, and if true do this\n\t\tvar codes = stream.peekBytes(2);\n\t\treturn codes[0] === 0x21 && codes[1] === 0xF9;\n\t},\n\tparts: [\n\t\t{ label: 'codes', parser: Parsers.readBytes(2), skip: true },\n\t\t{ label: 'byteSize', parser: Parsers.readByte() },\n\t\t{ label: 'extras', bits: {\n\t\t\tfuture: { index: 0, length: 3 },\n\t\t\tdisposal: { index: 3, length: 3 },\n\t\t\tuserInput: { index: 6 },\n\t\t\ttransparentColorGiven: { index: 7 }\n\t\t}},\n\t\t{ label: 'delay', parser: Parsers.readUnsigned(true) },\n\t\t{ label: 'transparentColorIndex', parser: Parsers.readByte() },\n\t\t{ label: 'terminator', parser: Parsers.readByte(), skip: true }\n\t]\n};\n\n// image pipeline block\nvar image = {\n\tlabel: 'image',\n\trequires: function(stream){\n\t\t// peek at the next byte\n\t\tvar code = stream.peekByte();\n\t\treturn code === 0x2C;\n\t},\n\tparts: [\n\t\t{ label: 'code', parser: Parsers.readByte(), skip: true },\n\t\t{\n\t\t\tlabel: 'descriptor', // image descriptor\n\t\t\tparts: [\n\t\t\t\t{ label: 'left', parser: Parsers.readUnsigned(true) },\n\t\t\t\t{ label: 'top', parser: Parsers.readUnsigned(true) },\n\t\t\t\t{ label: 'width', parser: Parsers.readUnsigned(true) },\n\t\t\t\t{ label: 'height', parser: Parsers.readUnsigned(true) },\n\t\t\t\t{ label: 'lct', bits: {\n\t\t\t\t\texists: { index: 0 },\n\t\t\t\t\tinterlaced: { index: 1 },\n\t\t\t\t\tsort: { index: 2 },\n\t\t\t\t\tfuture: { index: 3, length: 2 },\n\t\t\t\t\tsize: { index: 5, length: 3 }\n\t\t\t\t}}\n\t\t\t]\n\t\t},{\n\t\t\tlabel: 'lct', // optional local color table\n\t\t\trequires: function(stream, obj, parent){\n\t\t\t\treturn parent.descriptor.lct.exists;\n\t\t\t},\n\t\t\tparser: Parsers.readArray(3, function(stream, obj, parent){\n\t\t\t\treturn Math.pow(2, parent.descriptor.lct.size + 1);\n\t\t\t})\n\t\t},{\n\t\t\tlabel: 'data', // the image data blocks\n\t\t\tparts: [\n\t\t\t\t{ label: 'minCodeSize', parser: Parsers.readByte() },\n\t\t\t\tsubBlocks\n\t\t\t]\n\t\t}\n\t]\n};\n\n// plain text block\nvar text = {\n\tlabel: 'text',\n\trequires: function(stream){\n\t\t// just peek at the top two bytes, and if true do this\n\t\tvar codes = stream.peekBytes(2);\n\t\treturn codes[0] === 0x21 && codes[1] === 0x01;\n\t},\n\tparts: [\n\t\t{ label: 'codes', parser: Parsers.readBytes(2), skip: true },\n\t\t{ label: 'blockSize', parser: Parsers.readByte() },\n\t\t{ \n\t\t\tlabel: 'preData', \n\t\t\tparser: function(stream, obj, parent){\n\t\t\t\treturn stream.readBytes(parent.text.blockSize);\n\t\t\t}\n\t\t},\n\t\tsubBlocks\n\t]\n};\n\n// application block\nvar application = {\n\tlabel: 'application',\n\trequires: function(stream, obj, parent){\n\t\t// make sure this frame doesn't already have a gce, text, comment, or image\n\t\t// as that means this block should be attached to the next frame\n\t\t//if(parent.gce || parent.text || parent.image || parent.comment){ return false; }\n\n\t\t// peek at the top two bytes\n\t\tvar codes = stream.peekBytes(2);\n\t\treturn codes[0] === 0x21 && codes[1] === 0xFF;\n\t},\n\tparts: [\n\t\t{ label: 'codes', parser: Parsers.readBytes(2), skip: true },\n\t\t{ label: 'blockSize', parser: Parsers.readByte() },\n\t\t{ \n\t\t\tlabel: 'id', \n\t\t\tparser: function(stream, obj, parent){\n\t\t\t\treturn stream.readString(parent.blockSize);\n\t\t\t}\n\t\t},\n\t\tsubBlocks\n\t]\n};\n\n// comment block\nvar comment = {\n\tlabel: 'comment',\n\trequires: function(stream, obj, parent){\n\t\t// make sure this frame doesn't already have a gce, text, comment, or image\n\t\t// as that means this block should be attached to the next frame\n\t\t//if(parent.gce || parent.text || parent.image || parent.comment){ return false; }\n\n\t\t// peek at the top two bytes\n\t\tvar codes = stream.peekBytes(2);\n\t\treturn codes[0] === 0x21 && codes[1] === 0xFE;\n\t},\n\tparts: [\n\t\t{ label: 'codes', parser: Parsers.readBytes(2), skip: true },\n\t\tsubBlocks\n\t]\n};\n\n// frames of ext and image data\nvar frames = {\n\tlabel: 'frames',\n\tparts: [\n\t\tgce,\n\t\tapplication,\n\t\tcomment,\n\t\timage,\n\t\ttext\n\t],\n\tloop: function(stream){\n\t\tvar nextCode = stream.peekByte();\n\t\t// rather than check for a terminator, we should check for the existence\n\t\t// of an ext or image block to avoid infinite loops\n\t\t//var terminator = 0x3B;\n\t\t//return nextCode !== terminator;\n\t\treturn nextCode === 0x21 || nextCode === 0x2C;\n\t}\n};\n\n// main GIF schema\nvar schemaGIF = [\n\t{\n\t\tlabel: 'header', // gif header\n\t\tparts: [\n\t\t\t{ label: 'signature', parser: Parsers.readString(3) },\n\t\t\t{ label: 'version', parser: Parsers.readString(3) }\n\t\t]\n\t},{\n\t\tlabel: 'lsd', // local screen descriptor\n\t\tparts: [\n\t\t\t{ label: 'width', parser: Parsers.readUnsigned(true) },\n\t\t\t{ label: 'height', parser: Parsers.readUnsigned(true) },\n\t\t\t{ label: 'gct', bits: {\n\t\t\t\texists: { index: 0 },\n\t\t\t\tresolution: { index: 1, length: 3 },\n\t\t\t\tsort: { index: 4 },\n\t\t\t\tsize: { index: 5, length: 3 }\n\t\t\t}},\n\t\t\t{ label: 'backgroundColorIndex', parser: Parsers.readByte() },\n\t\t\t{ label: 'pixelAspectRatio', parser: Parsers.readByte() }\n\t\t]\n\t},{\n\t\tlabel: 'gct', // global color table\n\t\trequires: function(stream, obj){\n\t\t\treturn obj.lsd.gct.exists;\n\t\t},\n\t\tparser: Parsers.readArray(3, function(stream, obj){\n\t\t\treturn Math.pow(2, obj.lsd.gct.size + 1);\n\t\t})\n\t},\n\tframes // content frames\n];\n\nmodule.exports = schemaGIF;\n},{\"../bower_components/js-binary-schema-parser/src/parsers\":3}]},{},[4])\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n\n\n/*** EXPORTS FROM exports-loader ***/\nexports[\"GIFuctJS\"] = (GIF);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/exports-loader/index.js?GIFuctJS=GIF!./bower_components/gifuct-js/dist/gifuct-js.js\n");

/***/ }),

/***/ "./src/easy-gif.js":
/*!*************************!*\
  !*** ./src/easy-gif.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bower_components_gif_js_dist_gif__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bower_components/gif.js/dist/gif */ \"./bower_components/gif.js/dist/gif.js\");\n/* harmony import */ var _bower_components_gif_js_dist_gif__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_bower_components_gif_js_dist_gif__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var exports_loader_GIFuctJS_GIF_bower_components_gifuct_js_dist_gifuct_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! exports-loader?GIFuctJS=GIF!../bower_components/gifuct-js/dist/gifuct-js */ \"./node_modules/exports-loader/index.js?GIFuctJS=GIF!./bower_components/gifuct-js/dist/gifuct-js.js\");\n/* harmony import */ var exports_loader_GIFuctJS_GIF_bower_components_gifuct_js_dist_gifuct_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(exports_loader_GIFuctJS_GIF_bower_components_gifuct_js_dist_gifuct_js__WEBPACK_IMPORTED_MODULE_1__);\n\r\n\r\n\r\n/**\r\n * constructor\r\n * @param {*} options \r\n */\r\nconst EasyGif = {\r\n    decoder: function (arrayBuffer) {\r\n        return new exports_loader_GIFuctJS_GIF_bower_components_gifuct_js_dist_gifuct_js__WEBPACK_IMPORTED_MODULE_1__[\"GIFuctJS\"](arrayBuffer);\r\n    },\r\n    encoder: function (options) {\r\n        return new _bower_components_gif_js_dist_gif__WEBPACK_IMPORTED_MODULE_0___default.a(options);\r\n    }\r\n};\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (EasyGif);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZWFzeS1naWYuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZWFzeS1naWYuanM/MTdkOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR0lGIGZyb20gJy4uL2Jvd2VyX2NvbXBvbmVudHMvZ2lmLmpzL2Rpc3QvZ2lmJ1xyXG5pbXBvcnQgeyBHSUZ1Y3RKUyB9IGZyb20gJ2V4cG9ydHMtbG9hZGVyP0dJRnVjdEpTPUdJRiEuLi9ib3dlcl9jb21wb25lbnRzL2dpZnVjdC1qcy9kaXN0L2dpZnVjdC1qcydcclxuXHJcbi8qKlxyXG4gKiBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0geyp9IG9wdGlvbnMgXHJcbiAqL1xyXG5jb25zdCBFYXN5R2lmID0ge1xyXG4gICAgZGVjb2RlcjogZnVuY3Rpb24gKGFycmF5QnVmZmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBHSUZ1Y3RKUyhhcnJheUJ1ZmZlcik7XHJcbiAgICB9LFxyXG4gICAgZW5jb2RlcjogZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEdJRihvcHRpb25zKTtcclxuICAgIH1cclxufTtcclxuZXhwb3J0IGRlZmF1bHQgRWFzeUdpZjsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/easy-gif.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: EasyGif */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _easy_gif__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./easy-gif */ \"./src/easy-gif.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"EasyGif\", function() { return _easy_gif__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRWFzeUdpZiBmcm9tICcuL2Vhc3ktZ2lmJ1xyXG5leHBvcnQgeyBFYXN5R2lmIH07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ })

/******/ })));