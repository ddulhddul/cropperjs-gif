{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/cropperjs-gif.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","GifCropper","options","background","this","containerCanvas","document","createElement","containerCtx","getContext","convertorCanvas","convertorCtx","containerCenterX","containerCenterY","image","height","width","__webpack_exports__","CropperjsGif","ERROR","IMAGE_LOAD_ERROR","IMAGE_READ_ERROR","DECODE_ERROR","ENCODE_ERROR","crop","cropper","callback","cropArea","getData","that","readAndDecodeGif","setupCanvas","cropFrame","result","saveGif","cropBlob","Image","onload","naturalWidth","naturalHeight","xhr","XMLHttpRequest","responseType","onreadystatechange","readyState","status","decode","response","errorHandler","Error","statusText","open","src","send","onerror","arraybuffer","gifDecoder","EasyGif","decoder","frames","decompressFrames","error","radian","Math","PI","rotate","rotatedBoxWidth","cos","sin","rotatedBoxHeight","offsetX","min","x","offsetY","y","max","clearRect","frameIndex","cropImgData","frame","imgData","frameToImageData","save","translate","scale","scaleX","scaleY","drawImage","drawImgDataToCanvas","restore","globalCompositeOperation","fillStyle","fillRect","getImageData","push","length","nextTick","putImageData","dims","left","top","imgDataList","encoder","addFrame","delay","on","blob","render","errorCode","window","requestAnimationFrame","webkitRequestAnimationFrame","setTimeout"],"mappings":"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","file":"cropperjs-gif.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\r\n * a plugin support cropperjs to crop gif image\r\n * \r\n * options:\r\n *  background: \"#fff\" default background color\r\n *  maxWidth: output image max width\r\n *  maxHeight: output image max height\r\n *  src: original image url (blob, base64, http)\r\n *  onerror: error callback, onerror(errorCode, error|null)\r\n */\r\nfunction GifCropper(options) {\r\n    options.background = options.background || '#fff';\r\n    this.options = options;\r\n    this.containerCanvas = document.createElement('canvas');\r\n    this.containerCtx = this.containerCanvas.getContext('2d');\r\n    this.convertorCanvas = document.createElement('canvas');\r\n    this.convertorCtx = this.convertorCanvas.getContext('2d');\r\n    this.containerCenterX = null;\r\n    this.containerCenterY = null;\r\n    this.image = null;\r\n    this.height = null;\r\n    this.width = null;\r\n\r\n    // document.body.insertBefore(this.containerCanvas, document.body.firstChild);\r\n    // document.body.insertBefore(this.convertorCanvas, document.body.firstChild);\r\n}\r\n\r\nvar ERROR = {\r\n    IMAGE_LOAD_ERROR: \"IMAGE_LOAD_ERROR\",\r\n    IMAGE_READ_ERROR: \"IMAGE_READ_ERROR\",\r\n    DECODE_ERROR: \"DECODE_ERROR\",\r\n    ENCODE_ERROR: \"ENCODE_ERROR\"\r\n}\r\n\r\nGifCropper.prototype.ERROR = ERROR;\r\n\r\n/**\r\n * cropper: cropperjs instance\r\n */\r\nGifCropper.prototype.crop = function(cropper, callback){\r\n    var cropArea = cropper.getData();\r\n    var that = this;\r\n\r\n    this.readAndDecodeGif(function(){\r\n        that.setupCanvas(cropArea);\r\n        that.cropFrame(0, cropArea, [], function(result) {\r\n            that.saveGif(cropArea, result, function(cropBlob){\r\n                callback && callback(cropBlob);\r\n            });\r\n        });\r\n    });\r\n}\r\n/**\r\n * get gif width and height, decode gif to frame array\r\n */\r\nGifCropper.prototype.readAndDecodeGif = function(callback){\r\n    var that = this;\r\n    this.image = new Image();\r\n    this.image.onload = function(){\r\n        that.width = this.naturalWidth || this.width;\r\n        that.height = this.naturalHeight || this.height;\r\n\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.responseType = \"arraybuffer\";\r\n        xhr.onreadystatechange = function(){\r\n            if(xhr.readyState == 4) {\r\n                if(xhr.status == 200) {\r\n                    that.decode(xhr.response, callback);\r\n                } else {\r\n                    that.errorHandler(ERROR.IMAGE_READ_ERROR, new Error(xhr.statusText));\r\n                }\r\n            }\r\n        }\r\n        xhr.open('GET', that.options.src);\r\n        xhr.send(null);\r\n    }\r\n    this.image.onerror = function(){\r\n        that.errorHandler(ERROR.IMAGE_LOAD_ERROR);\r\n    }\r\n    this.image.src = this.options.src;\r\n}\r\n/**\r\n * decode gif\r\n */\r\nGifCropper.prototype.decode = function(arraybuffer, callback){\r\n    try {\r\n        var gifDecoder = EasyGif.decoder(arraybuffer);\r\n        this.frames = gifDecoder.decompressFrames();\r\n        callback && callback();\r\n    } catch (error) {\r\n        this.errorHandler(ERROR.DECODE_ERROR, error);\r\n    }\r\n}\r\n/**\r\n * setup canvas size\r\n */\r\nGifCropper.prototype.setupCanvas = function(cropArea) {\r\n    // 计算图片旋转后的尺寸和切剪后的尺寸， 取最大的一方作为container的尺寸\r\n    var radian = Math.PI/180*cropArea.rotate;\r\n    var rotatedBoxWidth = this.width*Math.cos(radian)+this.height*Math.sin(radian);\r\n    var rotatedBoxHeight = this.height*Math.cos(radian)+this.width*Math.sin(radian);\r\n    \r\n    this.offsetX = -Math.min(cropArea.x, 0);\r\n    this.offsetY = -Math.min(cropArea.y, 0);\r\n    this.containerCenterX = this.offsetX + rotatedBoxWidth / 2;\r\n    this.containerCenterY = this.offsetY + rotatedBoxHeight / 2;\r\n\r\n    this.containerCanvas.width = Math.max(this.offsetX + rotatedBoxWidth, this.offsetX + cropArea.width);\r\n    this.containerCanvas.height = Math.max(this.offsetY + rotatedBoxHeight, this.offsetY + cropArea.height);\r\n    this.containerCtx.clearRect(0, 0, this.containerCanvas.width, this.containerCanvas.height);\r\n\r\n    this.convertorCanvas.width = this.width;\r\n    this.convertorCanvas.height = this.height;\r\n}\r\n/**\r\n * crop one frame by index\r\n */\r\nGifCropper.prototype.cropFrame = function(frameIndex, cropArea, result, callback) {\r\n    var frame = this.frames[frameIndex];\r\n    var imgData = EasyGif.frameToImageData(this.containerCtx, frame);\r\n    var cropImgData = null;\r\n    var that = this;\r\n\r\n    this.containerCtx.save();\r\n    this.containerCtx.translate(this.containerCenterX, this.containerCenterY);\r\n    this.containerCtx.rotate(cropArea.rotate*Math.PI/180);\r\n    this.containerCtx.scale(cropArea.scaleX, cropArea.scaleY);\r\n    this.containerCtx.drawImage(this.drawImgDataToCanvas(frame, imgData), -imgData.width/2, -imgData.height/2);\r\n    this.containerCtx.restore();\r\n\r\n    if(frameIndex == 0 && this.containerCtx.globalCompositeOperation) {\r\n        // 添加gif背景颜色\r\n        this.containerCtx.fillStyle = this.options.background;\r\n        this.containerCtx.globalCompositeOperation = \"destination-over\";\r\n        this.containerCtx.fillRect(0, 0, this.containerCanvas.width, this.containerCanvas.height);\r\n        this.containerCtx.globalCompositeOperation = \"source-over\";\r\n    }\r\n                \r\n    cropImgData = this.containerCtx.getImageData(\r\n        cropArea.x + this.offsetX,\r\n        cropArea.y + this.offsetY,\r\n        cropArea.width,\r\n        cropArea.height\r\n    );\r\n\r\n    result.push(cropImgData);\r\n\r\n    frameIndex++;\r\n    if(frameIndex < this.frames.length) {\r\n        nextTick(function(){\r\n            that.cropFrame(frameIndex, cropArea, result, callback);\r\n        });\r\n    } else {\r\n        callback && callback(result);\r\n    }\r\n}\r\nGifCropper.prototype.drawImgDataToCanvas = function(frame, imgData) {\r\n    this.convertorCtx.clearRect(0,0, this.width, this.height);\r\n    this.convertorCtx.putImageData(imgData, frame.dims.left, frame.dims.top);\r\n    return this.convertorCanvas;\r\n}\r\nGifCropper.prototype.saveGif = function(cropArea, imgDataList, callback){\r\n    var options = this.options.encoder || {};\r\n    options.width = cropArea.width;\r\n    options.height = cropArea.height;\r\n\r\n    try {\r\n        var encoder = EasyGif.encoder(options);\r\n    \r\n        for(var i=0;i<imgDataList.length;i++) {\r\n            encoder.addFrame(imgDataList[i], {\r\n                delay: this.frames[i].delay\r\n            });\r\n        }\r\n        encoder.on('finished', function(blob){\r\n            callback && callback(blob);\r\n        });\r\n        encoder.render();\r\n    } catch (error) {\r\n        this.errorHandler(ERROR.DECODE_ERROR, error);\r\n    }\r\n}\r\n\r\nGifCropper.prototype.errorHandler = function(errorCode, error){\r\n    this.options.onerror && this.options.onerror(errorCode, error);\r\n}\r\n\r\nvar nextTick = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.setTimeout;\r\n\r\n\r\nvar CropperjsGif = {\r\n    /**\r\n     * options: GifCropper options\r\n     * cropper: cropperjs instance\r\n     * callback: \r\n     */\r\n    crop: function(options, cropper, callback){\r\n        return new GifCropper(options).crop(cropper, callback);\r\n    }\r\n}\r\n\r\nexport { CropperjsGif };"],"sourceRoot":""}